@page "/delete-customer/{Id:int}"

@using NARA20240910.DTOs.ProductDTOs;
@using Microsoft.AspNetCore.Components.Forms;
@using UI_Blazor.Data;

<h3>Eliminar Producto</h3>
@if (isSuccess == false && isError == false)
{
    <div class="row">
        <div class="col-4">
            <div class="form-group">
                <label for="NombreNARA">Nombre:</label>
                <input type="text" class="form-control" disabled @bind="customer.NombreNARA" />
            </div>
        </div>
        <div class="col-4">
            <div class="form-group">
                <label for="DescripcionNARA">Apellido:</label>
                <input type="text" class="form-control" disabled @bind="customer.DescripcionNARA" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="form-group">
                <label for="Precio">Dirección:</label>
                <input type="text" class="form-control" disabled @bind="customer.Precio" />
            </div>
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="async () => await Delete()">Eliminar</button>
            <NavLink href="/productNara-list" class="btn btn-secondary">Cancelar</NavLink>
        </div>
    </div>
}
else if (isSuccess)
{
    <p class="alert alert-success">Producto se Elimino con éxito.</p>
    <NavLink href="/productNara-list" class="btn btn-primary">Aceptar</NavLink>
}
else if (isError)
{
    <p class="alert alert-error">Sucedio un error al intentar modificar. o no ha realizado ninguna modificacion al registro actual</p>
    <NavLink href="/productNara-list" class="btn btn-primary">Aceptar</NavLink>
}

@code {
    // Declaración de un parámetro llamado "Id" que puede ser pasado al componente
    [Parameter]
    public int Id { get; set; }

    // Inyección de dependencia de CustomerService para acceder a los servicios relacionados con los clientes
    [Inject]
    ProductNARAService customerService { get; set; }

    // Declaración e inicialización de un objeto "customer" para almacenar la información del cliente
    GetIdResultProductDTO customer = new GetIdResultProductDTO();

    // Declaración de variables booleanas para manejar el estado de éxito y error
    bool isSuccess = false;
    bool isError = false;

    // Método que se llama cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        // Realiza una llamada asincrónica para obtener la información del cliente por su Id
        customer = await customerService.GetById(Id);
    }

    // Método para eliminar el cliente
    private async Task Delete()
    {
        // Realiza una llamada asincrónica para eliminar el cliente por su Id
        int result = await customerService.Delete(customer.Id);

        // Verifica si el resultado de la eliminación es diferente de cero (éxito) o igual a cero (error)
        if (result != 0)
            isSuccess = true;
        else
            isError = true;
    }

}